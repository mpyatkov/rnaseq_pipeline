#+KEYWORDS:  caspases, n-rule, cleavage sites, apoptosis
#+LANGUAGE:  en
#+OPTIONS:   H:4
#+OPTIONS:   num:nil
#+OPTIONS:   toc:2
#+OPTIONS:   p:t
#+OPTIONS: author:nil date:nil

* Pipeline usage (will be updated)
** Install last version of pipeline
This and all other steps assume that you are using *scc4* cluster.

Run the following command in the directory that you are going to use for RNAseq analysis:

#+begin_src 
git clone https://github.com/mpyatkov/rnaseq_pipeline.git pipeline 
#+end_src

** Anaconda environment installation (one-time procedure)
Because the pipeline extensivelly uses the anaconda packages, first of all install these packages

go to anaconda directory

#+begin_src sh
cd anaconda
#+end_src

edit the anaconda.qsub and change the PROJECT to yours

Since the installation takes a lot of time and space, start it using the server queue

#+begin_src sh
qsub anaconda.qsub
#+end_src

It will take a little time, you can check the progress with *qstat -u <your_user_name>*

The Anaconda environment will be installed by default in your home directory. In most cases there is enough space in the home directory for the installation, but in case of errors it should be set to a different path, which depends on the *PROJECT* you are assigned to.

To check that everything is ok, run the following commands:

#+begin_src sh
module load anaconda2
conda source RNAseq
#+end_src

And if you did not see any error messages, congratulations!

** Start the pipeline
This step assumes that you have already installed anaconda environment and the cloned version of pipeline.

Go to the directory pipeline/Scripts/00_Setup_Pipeline

You will see 3 files (01_Pipeline_Setup.py, 02_Review_Pipeline_Parameters.sh, 03_Run_Pipeline.sh). The most important ones are *01_Pipeline_Setup.py* and *03_Run_Pipeline.sh*. First of all, you need to run the following command to get configuration files:

#+begin_src sh
./01_Pipeline_Setup.py
#+end_src

It will give you 3 config files:

1) *Pipeline_Setup.conf* - contains all information about locations of samples, project, and other specific details. Probably to run the pipeline it will be enough to fill out only [USER] section.

2) *Sample_Labels.txt* - this files contains information about all samples. The main columns are:
   - *Group* - each sample should be associated with only one group
   - *Condition_Name* - this condition ID will appear in the names of the output files
   - *Sample_DIR* and *Sample_ID* - for simplicity, just use the same names for this parameters.
   - *Description* - the full description of the sample
   - *Color* - the color to be used in the UCSC browser

3) *Comparisons.txt* - contains information about which groups should be compared. The main rule here: *Condition_2/Condition_1*. Information from this step is required to generate directories for Differential Expression.
   
*WARNING: DO NOT USE QUOTES IN CONFIG FILES*

*WARNING: DO NOT USE SPACES IN VARIABLES IN CONFIG FILES, USE "_" INSTEAD*

Fill out this configuration files and go to the next step.
To start the pipeline you should run the following command. 

#+begin_src sh
./03_Run_Pipeline.sh FULL
#+end_src

In the case of *scc4*, the session will be closed after 15 minutes of inactivity. If you want the session to continue, use the *screen* or *tmux* - terminal multiplexers.

If you want to restart the pipeline from any step, just use the following command:

#+begin_src 
./03_Run_Pipeline.sh <full name of step>
#+end_src

* COMMENT Local vars :noexport:
   ;; Local Variables:
   ;; eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
   ;; End:
