#!/bin/bash -l

## SGE queue parameters
#$ -S /bin/bash
#$ -cwd
#$ -j y
#$ -e ./logs/
#$ -o ./logs/
#$ -l scratch_free=200G
#$ -pe omp 4

set -o errexit
set -o pipefail
set -o nounset

echo "=========================================================="
start_time=$(date +"%s")
echo "Starting on : $(date)"
echo "Running on node : $(hostname)"
echo "Current directory : $(pwd)"
echo "Current job ID : $JOB_ID"
echo "Current job name : $JOB_NAME"
echo "Task index number : $SGE_TASK_ID"
echo "Parameter for multiple cores : $NSLOTS"
echo "=========================================================="

#Use to calculate job time:

# export all variables from Pipeline_Setup.conf
eval "$(../00_Setup_Pipeline/01_Pipeline_Setup.py --export)"

# load anaconda module for case when we need independent run
set +eu
module load miniconda
conda activate --stack ${CONDA_DIR}/htseq
conda activate --stack ${CONDA_DIR}/featureCounts
conda activate --stack ${CONDA_DIR}/samtools
conda activate --stack ${CONDA_DIR}/bedtools
conda activate --stack ${CONDA_DIR}/rlang361
# source activate RNAseq
set -eu

# get 3 parameters (sample_id, gtf_file, counter)
SAMPLE_ID=$1
EXT_GTF_FILE=$2
EXT_COUNTER=$3

echo "CURRENT GTF FILE: ${EXT_GTF_FILE}"
echo "CURRENT COUNTER: ${EXT_COUNTER}"

# We always count by gene_id when using HTSeq and featureCounts
FEATURE_ID=gene_id

# calculate MODE (for HTSeq)
if [[ ${MODE} -eq 0 ]]
then
    intersection_mode="union"
elif [[ ${MODE} -eq 1 ]]
then
    intersection_mode="intersection-strict"
elif [[ ${MODE} -eq 2 ]]
then
    intersection_mode="intersection-nonempty"
fi

# automated strand detection
if [ ${STRANDEDNESS} -eq 3 ]; then
    export_file="${DATASET_DIR}/${SAMPLE_ID}/Read_Strandness/${SAMPLE_ID}_export.sh"
    if [[ -f "${export_file}" ]]; then
	# re-export STRANDEDNESS
	source ${export_file}
	echo "Auto: $STRANDEDNESS"
    else
	echo "Error: cannot find file: ${export_file}"
	echo "To use automatic strand detection, you must complete step 01_Read_Strandness"
	exit 1
    fi
fi

# calculate strandedness_htseq
if [ ${STRANDEDNESS} -eq 0 ]
then
    strandedness_htseq="no"
elif [ ${STRANDEDNESS} -eq 2 ]
then
    strandedness_htseq="yes"
elif [ ${STRANDEDNESS} -eq 1 ]
then
    strandedness_htseq="reverse"
fi

# calculate strandedness_featurecount
if [ ${STRANDEDNESS} -eq 0 ]
then
    strandedness_featurecount="0"
elif [ ${STRANDEDNESS} -eq 2 ]
then
    strandedness_featurecount="1"
elif [ ${STRANDEDNESS} -eq 1 ]
then
    strandedness_featurecount="2"
fi

## export GTF files variables
## should export for (genes.gtf, featureCounts) something like that (in future should contain more variables)
# export ANNOTATION_FILE=genes.gtf
# export COUNTER=featureCounts
# export FEATURE_TYPE=exon
# export OUTPUT_DIR=Illumina_GTF
# export SUB_FILE=0
# export REM_SPLICE_JUNC=0
# export SEGEX_ZERO_CNT=0
# export DBL_CNT=0
eval "$(../00_Setup_Pipeline/01_Pipeline_Setup.py --export_gtf_by_name_and_counter ${EXT_GTF_FILE} ${EXT_COUNTER})"

# current directory
SCRIPT_DIR="$(pwd)"

cd "${TMPDIR}"

# copy user input data files to scratch
cp "${DATASET_DIR}/${SAMPLE_ID}/tophat2/${SAMPLE_ID}_primary_unique.bam" .

# copy gtf file (annotation file):
cp "${GTF_FILES_DIR}/${ANNOTATION_FILE}" .

# init input bam:
input_bam="${SAMPLE_ID}_primary_unique.bam"

# make output dir:
storage_dir="${DATASET_DIR}/${SAMPLE_ID}/${COUNTER}"

# output_dir depending on the ANNOTATION_FILE used:
output_dir="${storage_dir}/${OUTPUT_DIR}"
rm -rf ${output_dir} && mkdir -p ${output_dir}

# output_file
output_file="${SAMPLE_ID}_${COUNTER}.out"
rm -rf ${output_file} && touch ${output_file}


# For the "Exonic_Only" counts I need to process the BAM file to filter out reads
# that overlap Intron_Only_Regions
if [[ ${SUB_FILE} != 0 ]]
then
    echo "SUB_FILE option activated"
    # copy SUB_FILE if exist
    cp "${GTF_FILES_DIR}/${SUB_FILE}" .
    
    intersectBed -v -abam ${input_bam} -b ${SUB_FILE} > "${SAMPLE_ID}_primary_no_Intron_Only.bam"

    #Redefine the ${input_bam}:
    input_bam="${SAMPLE_ID}_primary_no_Intron_Only.bam"
fi

# For the "Intronic_Only" counts I need to process the BAM file to filter out
# splice junction reads
if [[ ${REM_SPLICE_JUNC} != 0 ]]
then
    echo "REM_SPLICE_JUNC option activated"
    # Need a regular expression to specifically find these spliced reads:
    # Bunch of numbers then "M", bunch of numbers then "N", bunch of numbers then "M":
    # print only lines which do NOT match regex (emulates "grep -v")
    # NOT match regex:  awk '$7 !~ /^[a-f]/'
    # https://www.biostars.org/p/9247/
    # /^@[A-Za-z][A-Za-z](\t[A-Za-z][A-Za-z0-9]:[ -~]+)+$/
    # @ then two letters, a tab, then letters, then letter and/or number, then a colon, some characters after then the end of the string
    samtools view -h ${input_bam} | awk '($0 ~ /^@[A-Za-z][A-Za-z](\t[A-Za-z][A-Za-z0-9]:[ -~]+)+$/)' > Header.txt

    # Need everything after the header information (do NOT match regex):
    samtools view -h ${input_bam} | \
	awk '($0 !~ /^@[A-Za-z][A-Za-z](\t[A-Za-z][A-Za-z0-9]:[ -~]+)+$/)' | \
	awk '($6 !~ /[0-9]+[M][0-9]+[N][0-9]+[M]/)' | \
	cat Header.txt - | \
	samtools view -Sb - > "${SAMPLE_ID}_primary_no_splice.bam"

    # redefine the ${input_bam}:
    input_bam="${SAMPLE_ID}_primary_no_splice.bam"
    # remove temp files:
    rm -rf temp*.sam Header.txt 
fi

echo "input_bam: ${input_bam}"
# sort the input BAM file:
# usage:   samtools sort [options] <in.bam> <out.prefix>
# options: -n        sort by read name
samtools sort -n -o "${SAMPLE_ID}_sorted.bam" ${input_bam}
# samtools index "${SAMPLE_ID}_sorted.bam"

## Start counting
if [[ "$COUNTER" == "htseq" ]]
then
    echo "HTSeq activated"
    
    # (set -x; htseq-count --stranded=${strandedness_htseq} --type=${FEATURE_TYPE} --idattr=${FEATURE_ID} --order=name --mode=${intersection_mode} "${SAMPLE_ID}_sorted.bam" ${ANNOTATION_FILE} > ${output_file})

    (set -x; samtools view "${SAMPLE_ID}_sorted.bam" | htseq-count --stranded=${strandedness_htseq} --type=${FEATURE_TYPE} --idattr=${FEATURE_ID} --order=name --mode=${intersection_mode} - ${ANNOTATION_FILE}  > ${output_file})

else
    # featureCounts 
    # without double counting / simple double counting / special (legacy) double counting
    if [[ "${DBL_CNT}" == "0" ]]
    then
	echo "DBL_CNT=0 option is activated"
        (set -x; featureCounts -p -T $NSLOTS -s ${strandedness_featurecount} -g ${FEATURE_ID} -t ${FEATURE_TYPE} -a ${ANNOTATION_FILE} -o ${output_file} "${SAMPLE_ID}_sorted.bam")
        
    elif [[ "${DBL_CNT}" == "1" ]]; then
	echo "DBL_CNT=1 option is activated"
        
        (set -x; featureCounts -O -p -T $NSLOTS -s ${strandedness_featurecount} -g ${FEATURE_ID} -t ${FEATURE_TYPE} -a ${ANNOTATION_FILE} -o ${output_file} "${SAMPLE_ID}_sorted.bam")
        
    else
	echo "DBL_CNT=2 option is activated"
        # copy GeneSym_List.txt:
        cp ${GTF_FILES_DIR}/featureCount_Files/${ANNOTATION_FILE%\.gtf}/GeneSym_DoubleCounts/GeneSym_List.txt . 

        # copy Parse_GTF.R:
        cp ${SCRIPT_DIR}/Scripts/Parse_GTF.R . 

        #Run the command:
        (set -x; Rscript Parse_GTF.R ${ANNOTATION_FILE} GeneSym_List.txt)

        # Running assign_all_features counting"
        
        (set -x; featureCounts -O -p -T $NSLOTS -s ${strandedness_featurecount} -g ${FEATURE_ID} -t ${FEATURE_TYPE} -a GeneSym_assign_all_features.gtf -o "${SAMPLE_ID}_assign_all_features.out" "${SAMPLE_ID}_sorted.bam")
        
        # Running assign_only1_feature counting"
        (set -x; featureCounts -p -T $NSLOTS -s ${strandedness_featurecount} -g ${FEATURE_ID} -t ${FEATURE_TYPE} -a GeneSym_assign_only1_feature.gtf -o ${SAMPLE_ID}"_assign_only1_feature.out" ${SAMPLE_ID}'_sorted'.bam)
    fi

    # post processing is different for 0,1 and 2
    if [[ "${DBL_CNT}" == "2" ]]
    then
        #The featureCounts output file needs to be reformatted for use by DiffExp scripts
        file_list=*_assign_*.out
        for file in ${file_list}
        do
            echo "Processing "${file}
            # get rid of first 2 header lines:
            tail -n +3 ${file} > ${file}.temp1
            # just want the first and last column 
            awk -F '\t' '{print $1"\t"$NF}' ${file}.temp1 > ${file}.temp2
            # rename the count file:
            mv ${file}.temp2 ${file}
            # Remove temp files:
            rm *.temp*
        done

        # Need to concatenate summary files
        # Need to add headers to indicate counting method
	echo "${SAMPLE_ID}_assign_all_features:" >> "${output_file}.summary"
        cat "${SAMPLE_ID}_assign_all_features.out.summary" >> "${output_file}.summary"
	echo "${SAMPLE_ID}_assign_only1_feature:" >> "${output_file}.summary"
        cat "${SAMPLE_ID}_assign_only1_feature.out.summary" >> "${output_file}.summary"

        # Concatenate files then sort by 1st column
        cat *_assign_*.out > ${output_file}.temp1
        sort -k1,1 ${output_file}.temp1 > ${output_file}.temp2
        mv ${output_file}.temp2 ${output_file}
        # Remove temp files:
        rm ${output_file}.temp*
    else
        # get rid of first 2 header lines:
        tail -n +3 ${output_file} > ${output_file}.temp1
        # Just want the first and last column 
        awk -F '\t' '{print $1"\t"$NF}' ${output_file}.temp1 > ${output_file}.temp2
        # rename the count file:
        mv ${output_file}.temp2 ${output_file}
        # remove temp files:
        rm *.temp*
    fi
fi

if [[ "$SEGEX_ZERO_CNT" != "0" ]]
then
    echo "SEGEX_ZERO_CNT option is activated"
    if [[ $COUNTER == "htseq" ]]
    then

        #Copy RefSeq_Genes_Zero_Count.txt:
        cp ${SCRIPT_DIR}/RefSeq_Files/RefSeq_Genes_Zero_Count.txt .
        #Omit header from RefSeq_Genes_Zero_Count.txt
        tail -n +2 RefSeq_Genes_Zero_Count.txt > RefSeq_Genes_Zero_Count.temp
        #The HTSeq output file has 5 extra lines at the end (extract then add back)
        tail -n 5 ${output_file} > HTSeq_Extra_Lines.txt
        #Print everything except last n lines (use negative number):
        head -n -5 ${output_file} > ${output_file}.temp1
        #Concatenate files:
        cat ${output_file}.temp1 RefSeq_Genes_Zero_Count.temp > ${output_file}.temp2
        #Sort file by gene symbol
        sort -k1,1 ${output_file}.temp2 > ${output_file}.temp3
        #Concatenate HTSeq_Extra_Lines.txt back to count file:
        cat ${output_file}.temp3 HTSeq_Extra_Lines.txt > ${output_file}.temp4
        #Rename the count file:
        mv ${output_file}.temp4 ${output_file}
        #Remove temp files:
        rm *.temp*
        
    else
        
        #Copy RefSeq_Genes_Zero_Count.txt:
        cp ${SCRIPT_DIR}/RefSeq_Files/RefSeq_Genes_Zero_Count.txt . 
        #Omit header from RefSeq_Genes_Zero_Count.txt
        tail -n +2 RefSeq_Genes_Zero_Count.txt > RefSeq_Genes_Zero_Count.temp
        #The featureCounts output file has already been reformatted above
        #Concatenate files:
        cat ${output_file} RefSeq_Genes_Zero_Count.temp > ${output_file}.temp1
        #Sort file by gene symbol
        sort -k1,1 ${output_file}.temp1 > ${output_file}.temp2
        #Rename the count file:
        mv ${output_file}.temp2 ${output_file}
        #Remove temp files:
        rm *.temp*

    fi
fi

# copy the output files to users storage dir
cp ${output_file} ${output_dir}

if [[ $COUNTER == "featureCounts" ]]
then
    cp ${output_file}.summary ${output_dir}
fi

end_time=$(date +"%s")
diff=$((end_time-start_time))
echo "$((diff / 3600)) hours, $(((diff / 60) % 60)) minutes and $((diff % 60)) seconds elapsed."
echo "=========================================================="
echo "IAMOK"
