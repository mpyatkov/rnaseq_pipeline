#!/bin/bash -l

# Specify which shell to use
#$ -S /bin/bash
#$ -cwd
#$ -j y
#$ -e ./logs/
#$ -o ./logs/
#$ -pe omp 2

# This script should allow you to generate combined bigwig files for
# groups of previously obtained Forward and Reverse bigwig files

# At this step that all required Forward and Reverse bigwig files are located
# in the /net/waxman-server/mnt/data/waxmanlabvm_home/TRACKS/{INDEXED_PROJECTS}
# directories.

# set strict options
set -o errexit
set -o pipefail
set -o nounset

# Extract samples names and combine them to appropriate lines, ex: G186_M1M2M3
# This procedure works only if your sample folders called as "PROJECTNAME_SAMPLEID",
# because here we extract all SAMPLEIDs and combine them as one line.
# Will work for combining samples from different projects like: G184_M1M2_G186_M1M2 (sorted lexicograhically)
get_samples_line(){
    # parse line: SAMPLE_ID PROJECTNAME
    local fname=$1
    groups=$(cat $fname | cat tmpfile| cut -d" " -f1 | cut -d "_" -f1 | sort | uniq)

    res=""
    for i in $groups
    do
	group="${i}_$(grep ${i} $fname | cut -f 1 -d" " | cut -d "_" -f 2 | paste -s -d '')_"
	res+=$group
    done

    echo ${res%_}
}

# get project name, can be combined ex. G186_G184
get_project_name(){
    # parse line: SAMPLE_ID PROJECTNAME
    local fname=$1
    combined_name=$(cat $fname | cut -f 2 -d" " | sort | uniq | paste -s -d '_')
    echo ${combined_name}
}

# export all variables from Pipeline_Setup.conf
eval "$(../00_Setup_Pipeline/01_Pipeline_Setup.py --export)"

# activate conda environment
set +eu
module load miniconda
conda activate --stack ${CONDA_DIR}/wig
set -eu

# dir name for storing bigwig files 
# UCSC_SAMPLE=UCSC_BigWig

# remove file from previous run which will contains group names
rm -rf COMBINED_PAIRS.txt

groups=($("${SETUP_PIPELINE_DIR}"/01_Pipeline_Setup.py --groups))

# for each group
for group in "${groups[@]}"; do

    # get samples array (triples of sample_id, description, color for each sample)
    samples=($("${SETUP_PIPELINE_DIR}"/01_Pipeline_Setup.py --samples_by_group ${group} "color_enable"))

    # create new array contains path to Forward and Reverse bigwig files
    forward=()
    reverse=()
    # need to extract sample names and combine them together (ex: M1M2M3)
    suffix=()

    group_name=""
    for ((i=0;i< ${#samples[@]} ;i+=3));
    do
	SAMPLE_ID=${samples[i]}
	CONDNAME=${samples[i+1]}
	# color for combined track should be the same for all samples
	COLOR=${samples[i+2]}
	
	# check if sample in db
	sample_info=($("${SETUP_PIPELINE_DIR}"/01_Pipeline_Setup.py --get_sample_info ${SAMPLE_ID}))

	# project name should be the same for all combined samples
	project_name=${sample_info[0]}

	# because we use --samples_by_group with a group name
	# 01_Pipeline_Setup.py give us condition_name column instead
	# of description column. Condition_name should be the same for all
	# members of one group
	
	group_name=$CONDNAME
	
	forward+=("${VM_DIR_UCSC}/INDEXED_PROJECTS/${project_name}/${SAMPLE_ID}.Forward.bw")
	reverse+=("${VM_DIR_UCSC}/INDEXED_PROJECTS/${project_name}/${SAMPLE_ID}.Reverse.bw")

	# create tmp file to extract info about sampleid and project name for combined files
	printf "%s %s\n" "${SAMPLE_ID}" "${project_name}" >> tmpfile
    done

    # make tmp file for names (it is easy to work with file than array)
    # printf "%s\n" "${suffix[@]}" > tmpfile
    suffix_combined=$(get_samples_line tmpfile)

    # resulted project name (usually single project, but can be combined like ex. G186_G184)
    output_project_name=$(get_project_name tmpfile)

    # path will be common for all samples
    PATH_ON_SERVER="${VM_DIR_UCSC}/INDEXED_PROJECTS/${output_project_name}/"

    # create PATH_ON_SERVER if not exists
    mkdir -p ${PATH_ON_SERVER} 
    
    SERVER_DIR_NAME="INDEXED_PROJECTS/${output_project_name}"

    rm tmpfile

    # skip the rest if combined file already exist in ${VM_DIR_UCSC}/COMMON/
    FORWARD_BW="${suffix_combined}.Forward.combined.bw"
    REVERSE_BW="${suffix_combined}.Reverse.combined.bw"

    # if both files created skip calculation
    if [ ! -f "${PATH_ON_SERVER}/${FORWARD_BW}" -o ! -f "${PATH_ON_SERVER}/${REVERSE_BW}" ]; then
	echo "${PATH_ON_SERVER}/${FORWARD_BW}"
	echo "${PATH_ON_SERVER}/${REVERSE_BW}"
	echo "processing ${SAMPLE_ID}"
	# run wiggletools to calculate average for bigwig files and
	# convert them back to bigwig again
	echo "Forward reads ${suffix_combined}"
	# Forward reads
	wiggletools mean ${forward[@]} > tmp_forward.wig
	wigToBigWig tmp_forward.wig "./Chrom_Sizes/mm9.chrom.sizes" ${FORWARD_BW}
	rm tmp_forward.wig

	echo "Reverse reads ${suffix_combined}"
	wiggletools mean ${reverse[@]} > tmp_reverse.wig
	wigToBigWig tmp_reverse.wig "./Chrom_Sizes/mm9.chrom.sizes" ${REVERSE_BW}
	rm tmp_reverse.wig
    fi

    # add filename to COMBINED_PAIRS.txt (this file is required for track lines(next step))
    
    # print "filename \t group_name for forward reads"
    printf "%s\t%s\t%s\t%s\n" "${FORWARD_BW}" "${group_name}" "${SERVER_DIR_NAME}" "${COLOR}" >> COMBINED_PAIRS.txt

    # print "filename \t group_name for reverse reads"
    printf "%s\t%s\t%s\t%s\n" "${REVERSE_BW}" "${group_name}" "${SERVER_DIR_NAME}" "${COLOR}">> COMBINED_PAIRS.txt

    set +eu
    mv ${FORWARD_BW} ${REVERSE_BW} ${PATH_ON_SERVER}/
    set -eu
done

# generate track lines
./UCSC_Tracks.sh


echo "-----"
echo "IAMOK"
