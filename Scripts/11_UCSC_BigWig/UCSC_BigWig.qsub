#!/bin/bash -l

set -o errexit
set -o pipefail
set -o nounset

##################################################################################
#Andy Rampersaud, 08.07.17
#This script is called by setup_UCSC_BigWig.sh
##################################################################################
# Specify which shell to use
#$ -S /bin/bash
# Run on the current working directory
#$ -cwd
# Join standard output and error to a single file  
#$ -j y
# change to y if you want a single qlog file 
#$ -e ./logs/
#$ -o ./logs/
#$ -pe omp 8
#$ -l mem_per_core=2G
#$ -l scratch_free=200G
##################################################################################

# activate anaconda environment

# module load samtools/0.1.19
# load anaconda module for case when we need independent run

# export all variables from Pipeline_Setup.conf
eval "$(../00_Setup_Pipeline/01_Pipeline_Setup.py --export)"

set +eu
module load miniconda
conda activate --stack ${CONDA_DIR}/samtools
conda activate --stack ${CONDA_DIR}/rseqc
conda activate --stack ${CONDA_DIR}/wig
# conda activate RNAseq
set -eu

if [ $# -ne 1 ] ; then
    echo "Need 6 arguments for the qsub command:"
    echo "qsub -N ${Job_Name}'_'${Sample_ID} -P wax-dk -l h_rt=${TIME_LIMIT} UCSC_BigWig.qsub ${Sample_ID}"
    exit 0
fi

#process the command line arguments
SAMPLE_ID=$1

SCRIPT_DIR="$(pwd)"
PROJECT_DIR="$(pwd)/../../"

# automated strand detection
if [ ${STRANDEDNESS} -eq 3 ]; then
    export_file="${DATASET_DIR}/${SAMPLE_ID}/Read_Strandness/${SAMPLE_ID}_export.sh"
    if [[ -f "${export_file}" ]]; then
	# re-export STRANDEDNESS
	source ${export_file}
	echo "Auto: $STRANDEDNESS"
    else
	echo "Error: cannot find file: ${export_file}"
	echo "To use automatic strand detection, you must complete step 01_Read_Strandness"
	exit 1
    fi
fi

# calculate STRAND_RULE from STRANDEDNESS
if [ ${STRANDEDNESS} -eq 0 ]
then
STRAND_RULE="none"
elif [ ${STRANDEDNESS} -eq 2 ]
then
STRAND_RULE="1++,1--,2+-,2-+"
elif [ ${STRANDEDNESS} -eq 1 ]
then
STRAND_RULE="1+-,1-+,2++,2--"
fi

#Print variables (make sure they appear correctly):
echo "-----------------------"
echo "Start of variable list:"
echo "-----------------------"
echo "SAMPLE_ID:"
echo ${SAMPLE_ID}
echo "STRAND_RULE:"
echo ${STRAND_RULE}
echo "-----------------------"
echo "End of variable list"
echo "-----------------------"

# Now let's keep track of some information just in case anything goes wrong
echo "=========================================================="
#Use to calculate job time:
#Start_Time in seconds
Start_Time=$(date +"%s")
echo "Starting on : $(date)"
echo "Running on node : $(hostname)"
echo "Current directory : $(pwd)"
echo "Current job ID : $JOB_ID"
echo "Current job name : $JOB_NAME"
echo "Task index number : $SGE_TASK_ID"
echo "Parameter for multiple cores : $NSLOTS"
echo "=========================================================="

# Go to local scratch directory

# TMPDIR=DEBUG
# rm -rf $TMPDIR && mkdir $TMPDIR

cd ${TMPDIR}

cp ${DATASET_DIR}/${SAMPLE_ID}/aligner/"${SAMPLE_ID}_primary_unique.bam" .
#Initialize INPUT_BAM:

INPUT_BAM="${SAMPLE_ID}_primary_unique.bam"

echo
echo 'INPUT_BAM:'
echo ${INPUT_BAM}
echo

#Copy UCSC_BigWig required files:
cp ${SCRIPT_DIR}/Chrom_Sizes/mm9.chrom.sizes .

#Initialize variable:
CHROMSIZE_FILE=mm9.chrom.sizes

# # STORAGE_DIR=${DATASET_DIR}/${SAMPLE_ID}
# STORAGE_DIR=${DATASET_DIR}

#Create UCSC_BigWig output folder to store files:
# OUTPUT_DIR="${PROJECT_DIR}/UCSC_TRACKS"
# mkdir -p $OUTPUT_DIR

ls -alh

echo
echo 'Starting samtools sort and index'
echo


# samtools sort ${INPUT_BAM} ${SAMPLE_ID}'_sorted'
samtools sort -@ ${NSLOTS} -o "${SAMPLE_ID}_sorted.bam" ${INPUT_BAM}

# samtools sort only takes file name with extension
samtools index -@ ${NSLOTS} "${SAMPLE_ID}_sorted.bam"

#Initilize variable:
INPUT_FILE=${SAMPLE_ID}'_sorted.bam'


echo 'Starting bam2wig.py command'

#--------------------------------------------------------------------------------
#http://rseqc.sourceforge.net/#infer-experiment-py
#1. bam2wig.py converts all types of RNA-seq data from BAM format into wiggle format.
#2. If UCSC wigToBigWig tool was found, output wiggle file will be converted into bigwig format automatically.
#3. To use bam2wig.py, BAM file must be sorted and indexed properly using SAMtools. Below example shows how to sort and index BAM file using samTools
#--------------------------------------------------------------------------------

#The number you want your wigfiles to be normalized to. Please put
#1000000000. For the normalization, all wig files are normalized to a
#random, fixed number that I chose (1000000000). So, all wig files
#that are created with this script are comparable. The normalization
#is basically enforcing that the area under the wig-file curves are
#constant for all samples (i.e. the "drawing area" for each sample are
#fixed, it depends on each sample where to distribute its drawing
#area).

TOTAL_WIGSUM=1000000000
#--------------------------------------------------------------------------------

#For some reason "none" is not recognized by bam2wig.py
#Need an if statement to check if ${STRAND_RULE} equals "none"
#------------------------------------------
if [ "${STRAND_RULE}" == "none" ];
then
    #If the data is unstranded, then don't specify --strand option (default=none)
    bam2wig_options="--input-file=$INPUT_FILE --chromSize=$CHROMSIZE_FILE --out-prefix=${SAMPLE_ID} --wigsum=${TOTAL_WIGSUM}"
else
    bam2wig_options="--input-file=$INPUT_FILE --chromSize=$CHROMSIZE_FILE --out-prefix=${SAMPLE_ID} --wigsum=${TOTAL_WIGSUM} --strand=${STRAND_RULE}"
fi

#------------------------------------------
echo 'Printing command:'
echo "bam2wig.py "${bam2wig_options}

# TODO: if file is already created do not recalculate it
# Before run we should check existence of the bw files on server
COMMON_DIR="${VM_DIR_UCSC}/COMMON"

if [ ! -f "${COMMON_DIR}/${SAMPLE_ID}.Forward.bw" -o ! -f "${COMMON_DIR}/${SAMPLE_ID}.Reverse.bw" ]; then
    echo "Generate bigwig files..."
    # if one or both files do not exist - recalculate both of them
    bam2wig.py ${bam2wig_options}
fi

#--------------------------------------------------------------------------------

ls -l

# As mentioned above:
# 2. If UCSC wigToBigWig tool was found, output wiggle file will be converted into bigwig format automatically.
# For some reason when bam2wig.py calls the wigToBigWig tool it may return an error
# Better to call the wigToBigWig tool directly

# TODO: use bamCoverage instead of bam2wig.py + wigToBigWig

# Convert sorted bam to cram to keep space in waxmanlabvm
BAM_IN="${SAMPLE_ID}_primary_unique.bam"
CRAM_OUT="${SAMPLE_ID}_primary_unique.cram"
GENOME=${FASTA_DIR}/genome_mm9.fa

# convert to CRAM
if [ ! -f "${COMMON_DIR}/${CRAM_OUT}" ]; then
    echo "Generate CRAM files..."
    samtools view -@ ${NSLOTS} -b  -T ${GENOME} -C -o ${CRAM_OUT} ${BAM_IN}
    samtools index ${CRAM_OUT}
fi

echo 'Copy output to storage dir'
# cp *.bw *.cra* ${OUTPUT_DIR}

set +eu
echo "copy files if it is required"
cp *.bw *.cra* ${COMMON_DIR}
set -ue

echo "List files in scratch"
ls -alh

echo "=========================================================="
echo "Finished on : $(date)"
#Use to calculate job time:
#End_Time in seconds
End_Time=$(date +"%s")
diff=$(($End_Time-$Start_Time))
echo "$(($diff / 3600)) hours, $((($diff / 60) % 60)) minutes and $(($diff % 60)) seconds elapsed."
echo "=========================================================="
echo "IAMOK"
