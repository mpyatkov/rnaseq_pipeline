#!/bin/bash
##################################################################################
#Andy Rampersaud, 07.19.17
#This script would be used to run Generate_Tracks for different samples
#Way to run script:
#Usage: ./Generate_Tracks.sh
#Example: 
#./Generate_Tracks.sh 
##################################################################################

set -o errexit
set -o pipefail
set -o nounset
# set -x
# export all variables from Pipeline_Setup.conf
eval "$(../00_Setup_Pipeline/01_Pipeline_Setup.py --export)"

## check the strandedness and export it to the global scope
function get_strand_rule() {
    local STRANDEDNESS=$1
    local DDIR=$2
    local SID=$3
    
    if [ ${STRANDEDNESS} -eq 3 ]; then
	export_file="${DDIR}/${SID}/Read_Strandness/${SID}_export.sh"
	if [[ -f "${export_file}" ]]; then
	    # re-export STRANDEDNESS
	    source ${export_file}
	    # echo "Auto: $STRANDEDNESS"
	else
	    echo "ERROR: cannot find file: ${export_file}" >&2
	    echo "To use automatic strand detection, you must complete step 02_Read_Strandness" >&2
	    
	    exit 1
	fi
    fi

    if [ ${STRANDEDNESS} -eq 0 ]
    then
	STRAND_RULE="none"
    elif [ ${STRANDEDNESS} -eq 2 ]
    then
	STRAND_RULE="1++,1--,2+-,2-+"
    elif [ ${STRANDEDNESS} -eq 1 ]
    then
	STRAND_RULE="1+-,1-+,2++,2--"
    fi
    
    echo ${STRAND_RULE}
}

SCRIPT_DIR="$(pwd)"

#Check that each variable prints a value to the terminal:
echo "-----------------------"
echo "Start of variable list:"
echo "-----------------------"
echo "SCRIPT_DIR:"
echo ${SCRIPT_DIR}
echo "DATASET_LABEL:"
echo ${DATASET_LABEL}
echo "BU_USER:"
echo ${BU_USER}
echo "-----------------------"
echo "End of variable list"
echo "-----------------------"

#Output dir to store text files:
OUTPUT_DIR=${SCRIPT_DIR}/UCSC_Track_Lines
rm -rf ${OUTPUT_DIR} && mkdir -p ${OUTPUT_DIR}

## print legacy tracks
function print_header() {
    local FNAME=$1

    #Add TAD regions track line (generated by Bryan):
    echo "track type=bigBed name=TADS_ABv4 description=Liver_TADs visibility=pack itemRgb=On bigDataUrl=http://waxmanlabvm.bu.edu/aramp10/Lab_Files/TADS_ABv4.bb" >> ${FNAME}

    #More than likely for a typical UCSC Session you'll want the chromatin state maps with your screen shots:
    echo 'Start chromatin state tracks'


    #Add the chromatin state tracks
    while IFS=$'\t' read -r -a myArray
    do
	#---------------------------
	#Check that text file is read in properly:
	#echo 'Name:'
	#echo ${myArray[0]}
	#echo 'Description:
	#echo ${myArray[1]}
	#---------------------------
	#visibility options for bb files:
	#hide, dense, squish, pack, full
	#"pack" works for showing the emission label
	#Choose one:
	#BB_Visual=hide
	BB_Visual=dense
	#BB_Visual=squish
	#BB_Visual=pack
	#BB_Visual=full
	#---------------------------

	echo "track type=bigBed name='${myArray[0]}' description='${myArray[1]}' visibility=${BB_Visual} itemRgb=on bigDataUrl=http://waxmanlabvm.bu.edu/aramp10/Lab_Files/${myArray[0]}.bb"
    done < BigBed_Name_Color.txt >> ${FNAME}
    echo 'End chromatin state tracks'


    #---------------------------------------------------------------------------------
    #More than likely for a typical UCSC Session you'll want the lncRNA gene models file with your screen shots:
    echo 'Start Tisha_Gene_Definition track'

    #Since the file already has a track line in the file, the UCSC browser just needs the URL
    #Tisha updated GTF file:
    echo "http://waxmanlabvm.bu.edu/tisha/gtf/ucsc_ncRNA_output_filtered_final_gene_putativeStrand.gtf" >> ${FNAME}
    echo 'End Tisha_Gene_Definition track'

    #More than likely for a typical UCSC Session you'll want the counting regions with your screen shots:
    echo 'Start BED files of counting regions track(s)'

    #Since the file already has a track line in the file, the UCSC browser just needs the URL:
    echo 'http://waxmanlabvm.bu.edu/aramp10/Lab_Files/Exon_Regions_UCSC.bed.gz' >> ${FNAME}
    echo 'http://waxmanlabvm.bu.edu/aramp10/Lab_Files/Exon_Only_Regions_UCSC.bed.gz' >> ${FNAME}
    echo 'http://waxmanlabvm.bu.edu/aramp10/Lab_Files/Intron_Only_Regions_UCSC.bed.gz' >> ${FNAME}
    echo 'End BED files of counting regions track(s)'
    echo 'Add BAM and BigWig file tracks'
}

## generate tracks 
function generate_tracks() {
    local FNAME=$1
    local BWVISUAL=$2 # dense/full/pack
    local AUTOSCALE=$3 # on/off
    local BAMVISUAL=$4 # 0/full/dense,...
    local LEFTLIMIT=$5 # float number
    local RIGHTLIMIT=$6 # float number
    local WITH_HEADER=$7 # 0/1
    echo $FNAME

    if [ ${WITH_HEADER} -eq 1 ]; then
	print_header ${FNAME}
    fi
    
    # samples contains array of (sample_dir, sample_id, description, color) for each sample
    samples=($("${SETUP_PIPELINE_DIR}"/01_Pipeline_Setup.py --samples_with_color))


    for ((i=0;i< ${#samples[@]} ;i+=3))
    do

	# Sample_DIR=${samples[i]}
	Sample_ID=${samples[i]}
	Description=${samples[i+1]}
	Color=${samples[i+2]}

	# check if sample in db
	sample_info=($("${SETUP_PIPELINE_DIR}"/01_Pipeline_Setup.py --get_sample_info ${Sample_ID}))
	project_name=${sample_info[0]}

	SERVER_DIR_NAME="INDEXED_PROJECTS/${project_name}"
	
	STRAND_RULE=$(get_strand_rule $STRANDEDNESS ${DATASET_DIR} ${Sample_ID})
	
	if [[ "${STRAND_RULE}" != "none" ]]
	then
            #Make bigWig tracks (reads):
            echo "track type=bigWig name='${Sample_ID}_Forward_norm' description='${Description}_Forward_norm' db=mm9 visibility=${BWVISUAL} autoScale=${AUTOSCALE} viewLimits=${LEFTLIMIT}:${RIGHTLIMIT} color='${Color}' yLineOnOff=off windowingFunction=mean smoothingWindow=3 maxHeightPixels=100:45:8 bigDataUrl=http://waxmanlabvm.bu.edu/TRACKS/${SERVER_DIR_NAME}/${Sample_ID}.Forward.bw"

            #Make bigWig tracks (reads):
            echo "track type=bigWig name='${Sample_ID}_Reverse_norm' description='${Description}_Reverse_norm' db=mm9 visibility=${BWVISUAL} autoScale=${AUTOSCALE} viewLimits=-${RIGHTLIMIT}:${LEFTLIMIT} color='${Color}' yLineOnOff=off windowingFunction=mean smoothingWindow=3 negateValues=off maxHeightPixels=100:45:8 bigDataUrl=http://waxmanlabvm.bu.edu/TRACKS/${SERVER_DIR_NAME}/${Sample_ID}.Reverse.bw"
	else
	    #---------------------------------------------------------------------------------
	    #For un-stranded data we get a single *.bw file
	    #---------------------------------------------------------------------------------
	    
            echo "track type=bigWig name='${Sample_ID}_norm' description='${Description}' db=mm9 visibility=${BWVISUAL} autoScale=${AUTOSCALE} viewLimits=${LEFTLIMIT}:${RIGHTLIMIT} color='${Color}' yLineOnOff=off windowingFunction=mean smoothingWindow=3 maxHeightPixels=100:45:8 bigDataUrl=http://waxmanlabvm.bu.edu/TRACKS/${SERVER_DIR_NAME}/${Sample_ID}.bw"
	fi

	# Draw BAM tracks if BAMVISUAL not 0
	if [[ "${BAMVISUAL}" != "0" ]]; then
	    echo "track type=bam name='${Sample_ID}_${Description}' description='${Sample_ID}_${Description}' bamColorMode=strand db=mm9 visibility=${BAMVISUAL} bigDataUrl=http://waxmanlabvm.bu.edu/TRACKS/${SERVER_DIR_NAME}/${Sample_ID}_primary_unique.cram"
	fi
	
    done >> ${FNAME}

    ## COMBINED TRACKS
    ##
    COMBINED_OUTPUT=${FNAME%.txt}
    COMBINED_OUTPUT="${COMBINED_OUTPUT}_Combined.txt"
    
    if [ ${WITH_HEADER} -eq 1 ]; then
	print_header ${COMBINED_OUTPUT}
    fi
    
    while IFS=$'\t' read -r -a comb
    do
	fname=${comb[0]}
	group_name=${comb[1]}
	server_dir_name=${comb[2]}
	combined_color=${comb[3]}
	if [[ $fname == *"Forward"* ]]; then
	    echo "track type=bigWig name='${fname}' description='${group_name}' db=mm9 visibility=${BWVISUAL} autoScale=${AUTOSCALE} viewLimits=${LEFTLIMIT}:${RIGHTLIMIT} color='${combined_color}' yLineOnOff=off windowingFunction=mean smoothingWindow=3 maxHeightPixels=100:45:8 bigDataUrl=http://waxmanlabvm.bu.edu/TRACKS/${server_dir_name}/${fname}"
	else
	    echo "track type=bigWig name='${fname}' description='${group_name}' db=mm9 visibility=${BWVISUAL} autoScale=${AUTOSCALE} viewLimits=-${RIGHTLIMIT}:${LEFTLIMIT} color='${combined_color}' yLineOnOff=off windowingFunction=mean smoothingWindow=3 maxHeightPixels=100:45:8 bigDataUrl=http://waxmanlabvm.bu.edu/TRACKS/${server_dir_name}/${fname}"
	fi
	
    done < COMBINED_PAIRS.txt >> ${COMBINED_OUTPUT}
    
}

###############################
cd ${SCRIPT_DIR}
OUTPUT_FILE_PileUp="${OUTPUT_DIR}/${DATASET_LABEL}_Tracks_PileUp.txt"
rm -rf ${OUTPUT_FILE_PileUp}

echo 'Start *_Tracks_PileUp.txt'

# print_header ${OUTPUT_FILE_PileUp}

fname=${OUTPUT_FILE_PileUp}
bwvisual=dense # dense/full/pack
autoscale=on # on/off
bamvisual=pack # 0/full/dense,...
leftlimit=0.0 # float number
rightlimit=100.0 # float number
with_header=1
# forward=leftlimit:rightlimit; reverse=-rightlimit:leftlimit

generate_tracks $fname $bwvisual $autoscale $bamvisual $leftlimit $rightlimit ${with_header}

##################################################################################
OUTPUT_FILE_Wiggle=${OUTPUT_DIR}/${DATASET_LABEL}'_Tracks_Wiggle_100.txt'
rm -rf ${OUTPUT_FILE_Wiggle}

echo 'Start *_Tracks_Wiggle_100.txt'

# print_header ${OUTPUT_FILE_Wiggle}

fname=${OUTPUT_FILE_Wiggle}
bwvisual=full # dense/full/pack
autoscale=off # on/off
bamvisual=0 # 0/full/dense,...
leftlimit=0.0 # float number
rightlimit=100.0 # float number
with_header=1
# forward=leftlimit:rightlimit; reverse=-rightlimit:leftlimit

generate_tracks $fname $bwvisual $autoscale $bamvisual $leftlimit $rightlimit ${with_header}

############# additional wiggle tracks with different limits
echo 'Start *_Tracks_Wiggle_4.txt'
output4="${OUTPUT_DIR}/${DATASET_LABEL}_Tracks_Wiggle_4.txt"
output12="${OUTPUT_DIR}/${DATASET_LABEL}_Tracks_Wiggle_12.txt"
output60="${OUTPUT_DIR}/${DATASET_LABEL}_Tracks_Wiggle_60.txt"
# print_header ${output4}
# print_header ${output12}
# print_header ${output60}

bwvisual=full # dense/full/pack
autoscale=off # on/off
bamvisual=0 # 0/full/dense,...
with_header=1
# left and right limits are (+/-4, +/-12, +/-60)
generate_tracks $output4 $bwvisual $autoscale $bamvisual 0.0 4.0 ${with_header}
generate_tracks $output12 $bwvisual $autoscale $bamvisual 0.0 12.0 ${with_header}
generate_tracks $output60 $bwvisual $autoscale $bamvisual 0.0 60.0 ${with_header}

#---------------------------

echo 'Start *_Tracks_Wiggle_autoON.txt'
OUTPUT_FILE_Wiggle_autoON="${OUTPUT_DIR}/${DATASET_LABEL}_Tracks_Wiggle_autoON.txt"
# print_header ${OUTPUT_FILE_Wiggle_autoON}

fname=${OUTPUT_FILE_Wiggle_autoON}
bwvisual=full # dense/full/pack
autoscale=on # on/off
bamvisual=0 # 0/full/dense,..., 0 - means bam track is not required
leftlimit=0.0 # float number
rightlimit=100.0 # float number
with_header=1
# forward=leftlimit:rightlimit; reverse=-rightlimit:leftlimit

generate_tracks $fname $bwvisual $autoscale $bamvisual $leftlimit $rightlimit ${with_header}

##################################################################################
#Remove the temp file:
rm -rf *.temp
echo '#--------------------------------------------------------------------------'
#echo 'Check out '${OUTPUT_FILE_PileUp}'!'
#echo 'Check out '${OUTPUT_FILE_Wiggle}'!'
#echo 'Check out '${OUTPUT_FILE_Wiggle_autoON}'!'

echo "Check out ${OUTPUT_DIR} or ${VM_DIR_UCSC}/PERSONAL/${BU_USER}/${DATASET_LABEL}"
echo '#--------------------------------------------------------------------------'

user_dir="${VM_DIR_UCSC}/PERSONAL/${BU_USER}/${DATASET_LABEL}"
mkdir -p ${user_dir}
cp -a UCSC_Track_Lines ${user_dir}

##################################################################################
