#!/bin/bash -l
#$ -cwd
#$ -j y
#$ -e ./logs/
#$ -o ./logs/
#$ -l scratch_free=200G

set -o errexit
set -o pipefail
set -o nounset

# export all variables from Pipeline_Setup.conf
eval "$(../00_Setup_Pipeline/01_Pipeline_Setup.py --export)"

module load picard/2.25.2
module load R

if [ $# -ne 1 ]; then
    echo "Need 1 argument for the qsub command: SAMPLE_ID: {$1}"
    exit 0
fi

SAMPLE_ID=$1

# automated strand detection
if [ ${STRANDEDNESS} -eq 3 ]; then
    export_file="${DATASET_DIR}/${SAMPLE_ID}/Read_Strandness/${SAMPLE_ID}_export.sh"
    if [[ -f ${export_file} ]]; then
        # re-export STRANDEDNESS
        source ${export_file}
        echo "Auto: $STRANDEDNESS"
    else
        echo "Error: cannot find file: ${export_file}"
        echo "To use automatic strand detection, you must complete step 01_Read_Strandness"
        exit 1
    fi
fi

# Calculate strand_specificity from STRANDEDNESS
#CollectRnaSeqMetrics: strand_specificity
if [ ${STRANDEDNESS} -eq 0 ]; then
    strand_specificity="NONE"

elif [ ${STRANDEDNESS} -eq 2 ]; then
    strand_specificity="FIRST_READ_TRANSCRIPTION_STRAND"

elif [ ${STRANDEDNESS} -eq 1 ]; then
    strand_specificity="SECOND_READ_TRANSCRIPTION_STRAND"
fi

script_dir="$(pwd)"

start_time=$(date +"%s")
echo "Starting on : $(date)"
echo "Running on node : $(hostname)"
echo "Current directory : $(pwd)"
echo "Current job ID : $JOB_ID"
echo "Current job name : $JOB_NAME"
echo "Task index number : $SGE_TASK_ID"
echo "Parameter for multiple cores : $NSLOTS"
echo "=========================================================="

# Go to local scratch directory
input_bam="${DATASET_DIR}/${SAMPLE_ID}/aligner/${SAMPLE_ID}_primary_unique.bam"

if [ ${DEFAULT_ALIGNER} -eq 1 ]; then
    aligner="STAR"
else
    aligner="TOPHAT"
fi

storage_dir=${DATASET_DIR}/${SAMPLE_ID}/

# create CollectInsertSizeMetrics output folder to store files:
output_dir="${storage_dir}CollectInsertSizeMetrics"
mkdir -p "${output_dir}"
(
    set -x
    picard CollectInsertSizeMetrics HISTOGRAM_FILE="${output_dir}/${SAMPLE_ID}_hist.pdf" INPUT="${input_bam}" OUTPUT="${output_dir}/${SAMPLE_ID}_metrics"
)
echo 'Finished CollectInsertSizeMetrics command'

# create CollectRnaSeqMetrics
output_dir="${storage_dir}CollectRnaSeqMetrics"
mkdir -p "${output_dir}"
(
    set -x
    picard CollectRnaSeqMetrics REF_FLAT="${script_dir}/Input_Regions/genes_refFlat" RIBOSOMAL_INTERVALS="${script_dir}/Input_Regions/rRNA_intervalList_sorted.${aligner}" STRAND="${strand_specificity}" INPUT="${input_bam}" OUTPUT="${output_dir}/${SAMPLE_ID}_metrics"
)
echo 'Finished CollectRnaSeqMetrics command'

# create CollectDuplicates
output_dir="${storage_dir}CollectDuplicates"
mkdir -p "${output_dir}"
(
    set -x
    picard MarkDuplicates I=${input_bam} O=/dev/null M=${output_dir}/${SAMPLE_ID}_marked_dup_metrics.txt VALIDATION_STRINGENCY=SILENT MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=1000
)

echo 'Finished CollectDuplicates command'

echo "=========================================================="
echo "Finished on : $(date)"

end_time=$(date +"%s")
diff=$((end_time - start_time))
echo "$((diff / 3600)) hours, $(((diff / 60) % 60)) minutes and $((diff % 60)) seconds elapsed."
echo "=========================================================="
echo "IAMOK"
