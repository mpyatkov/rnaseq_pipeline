#!/bin/bash -l

##################################################################################
#Andy Rampersaud, 02.22.16
#This script is called by setup_CollectInsertSizeMetrics.sh
##################################################################################
# Specify which shell to use
#$ -S /bin/bash
#$ -cwd
#$ -j y
#$ -e ./logs/
#$ -o ./logs/
##################################################################################
#Initialize variables from CollectInsertSizeMetrics.sh
##################################################################################


set -o errexit
set -o pipefail
set -o nounset

# load anaconda environment
set +eu
module load anaconda2
source activate RNAseq
set -eu

# export all variables from Pipeline_Setup.conf
eval "$(../00_Setup_Pipeline/01_Pipeline_Setup.py --export)"

#checking the command line arg
#-ne : "is not equal to"
if [ $# -ne 1 ] ; then
      echo "Need 1 argument for the qsub command: SAMPLE_ID: {$1}"
      exit 0
fi

SAMPLE_ID=$1

# automated strand detection
if [ ${STRANDEDNESS} -eq 3 ]; then
    export_file="${DATASET_DIR}/${SAMPLE_ID}/Read_Strandness/${SAMPLE_ID}_export.sh"
    if [[ -f "${export_file}" ]]; then
	# re-export STRANDEDNESS
	source ${export_file}
	echo "Auto: $STRANDEDNESS"
    else
	echo "Error: cannot find file: ${export_file}"
	echo "To use automatic strand detection, you must complete step 01_Read_Strandness"
	exit 1
    fi
fi

# Calculate strand_specificity from STRANDEDNESS
#CollectRnaSeqMetrics: strand_specificity
if [ ${STRANDEDNESS} -eq 0 ]
then
strand_specificity="NONE"

elif [ ${STRANDEDNESS} -eq 2 ]
then
strand_specificity="FIRST_READ_TRANSCRIPTION_STRAND"

elif [ ${STRANDEDNESS} -eq 1 ]
then
strand_specificity="SECOND_READ_TRANSCRIPTION_STRAND"
fi


script_dir="$(pwd)"

# Now let's keep track of some information just in case anything goes wrong
#Use to calculate job time:
#Start_Time in seconds
start_time=$(date +"%s")
echo "Starting on : $(date)"
echo "Running on node : $(hostname)"
echo "Current directory : $(pwd)"
echo "Current job ID : $JOB_ID"
echo "Current job name : $JOB_NAME"
echo "Task index number : $SGE_TASK_ID"
echo "Parameter for multiple cores : $NSLOTS"
echo "=========================================================="

# Go to local scratch directory

cd "${TMPDIR}"
cp "${DATASET_DIR}/${SAMPLE_ID}/tophat2/${SAMPLE_ID}_primary_unique.bam" .

#Initialize INPUT_BAM:
input_bam="${SAMPLE_ID}_primary_unique.bam"

# copy CollectRnaSeqMetrics required files:
cp "${script_dir}/Input_Regions/genes_refFlat" .
cp "${script_dir}/Input_Regions/rRNA_intervalList_sorted" .

storage_dir=${DATASET_DIR}/${SAMPLE_ID}/

echo "CollectInsertSizeMetrics"
# create CollectInsertSizeMetrics output folder to store files:
output_dir="CollectInsertSizeMetrics"
mkdir -p "$output_dir"
(set -x; picard CollectInsertSizeMetrics HISTOGRAM_FILE="${output_dir}/${SAMPLE_ID}_hist.pdf" INPUT="${input_bam}" OUTPUT="${output_dir}/${SAMPLE_ID}_metrics")
echo 'Finished CollectInsertSizeMetrics command'
cp -r "$output_dir" "$storage_dir"

# ----------

echo "CollectRnaSeqMetrics"
# create CollectRnaSeqMetrics output folder to store files:
output_dir="CollectRnaSeqMetrics"
mkdir -p "${output_dir}"
(set -x; picard CollectRnaSeqMetrics REF_FLAT=genes_refFlat RIBOSOMAL_INTERVALS=rRNA_intervalList_sorted STRAND="${strand_specificity}" INPUT="${input_bam}" OUTPUT="${output_dir}/${SAMPLE_ID}_metrics")
cp -r ${output_dir} ${storage_dir}

echo "=========================================================="
echo "Finished on : $(date)"

end_time=$(date +"%s")
diff=$((end_time-start_time))
echo "$((diff / 3600)) hours, $(((diff / 60) % 60)) minutes and $((diff % 60)) seconds elapsed."
echo "=========================================================="
echo "IAMOK"
