#!/bin/bash -l

set -o errexit
set -o pipefail
set -o nounset

##################################################################################
#Andy Rampersaud, 02.22.16
#This script is called by setup_Extract_Counts.sh
##################################################################################
# Specify which shell to use
#$ -S /bin/bash
# Run on the current working directory
#$ -cwd

# Join standard output and error to a single file  
#$ -j n
# change to y if you want a single qlog file 

#$ -l scratch_free=200G
##################################################################################
#Initialize variables from Extract_Counts.sh
##################################################################################

# export all variables from Pipeline_Setup.conf
eval "$(../00_Setup_Pipeline/01_Pipeline_Setup.py --export)"


#checking the command line arg
#-ne : "is not equal to"
if [ $# -ne 6 ] ; then
      echo "Need 4 arguments for the qsub command:"
      exit 1
fi

#process the command line arguments
SAMPLE_ID=$1
STRANDEDNESS_HTSEQ=$2
FEATURE_ID=$3
ANNOTATION_FILE=$4
FEATURE_TYPE=$5
MODE=$6

script_dir=$(pwd)

# Now let's keep track of some information just in case anything goes wrong
echo "=========================================================="
#Start_Time in seconds
start_time=$(date +"%s")

echo "Starting on : $(date)"
echo "Running on node : $(hostname)"
echo "Current directory : $(pwd)"
echo "Current job ID : $JOB_ID"
echo "Current job name : $JOB_NAME"
echo "Task index number : $SGE_TASK_ID"
echo "Parameter for multiple cores : $NSLOTS"
echo "=========================================================="

# Go to local scratch directory
echo 'Change dir to scratch directory'
cd "${TMPDIR}"
echo 'Print scratch directory location:'
echo "${TMPDIR}"
#--------------------------------------
echo 'Loading required modules...'

module load R/3.6.0
module load gcc/8.1.0
module load samtools/0.1.19

# copy user input data files to scratch
cp "${DATASET_DIR}/${SAMPLE_ID}/fastq/tophat2/${SAMPLE_ID}_primary_unique.bam" .

#Copy gtf file (annotation file):
cp "${GTF_FILES_DIR}/${ANNOTATION_FILE}" .

if [ "${ANNOTATION_FILE}" == "Exon_Only_Regions.gtf" ];
then
    #Copy Intron_Only gtf file (annotation file):
    cp "${GTF_FILES_DIR}/Intron_Only_Regions.gtf" .
fi

#Initialize input_bam:
input_bam="${SAMPLE_ID}_primary_unique.bam"

#Make output dir:
storage_dir="${DATASET_DIR}/${SAMPLE_ID}/fastq/tophat2/HTSeq"

#Need if statements to name the OUTPUT_DIR depending on the ANNOTATION_FILE used:
if [ "${ANNOTATION_FILE}" == "genes.gtf" ];
then
    output_dir="${storage_dir}/Illumina_GTF"
fi

if [ "${ANNOTATION_FILE}" == "RefSeq_GeneBody.gtf" ];
then
    output_dir="${storage_dir}/RefSeq_Exon_GTF"
fi

if [ "${ANNOTATION_FILE}" == "Intron_Only_Regions.gtf" ];
then
    output_dir="${storage_dir}/RefSeq_Intron_GTF"
fi

if [ "${ANNOTATION_FILE}" == "Exon_Only_Regions.gtf" ];
then
    output_dir="${storage_dir}/RefSeq_Exon_Only_GTF"
fi

rm -rf "${output_dir}" && mkdir -p "${output_dir}"

output_file="${SAMPLE_ID}_HTSeq.out"
rm -rf "${output_file}" && touch "${output_file}"

echo 'List files in scratch directory:'
ls -alh

echo 'Starting to run my commands'

echo 'Starting samtools and htseq-count'


#For the "Exonic_Only" counts I need to process the BAM file to filter out reads
#that overlap Intron_Only_Regions
#Need an if statement to check ANNOTATION_FILE used:
if [ ${ANNOTATION_FILE} == "Exon_Only_Regions.gtf" ];
then
    echo 'Starting Intron_Only_Regions read overlap filter'
    #-v Only report those entries in A that have no overlap in B. Restricted by -f
    # and -r.
    #-abam BAM file A. Each BAM alignment in A is compared to B in search of
    # overlaps. Use “stdin” if passing A with a UNIX pipe: For example: samtools
    # view -b <BAM> | bedtools intersect -abam stdin -b genes.bed. Note: no longer
    # necessary after version 2.19.0
    # -b One or more BAM/BED/GFF/VCF file(s) “B”. Use “stdin” if passing B with a
    #  UNIX pipe.

    intersectBed -v -abam ${input_bam} -b Intron_Only_Regions.gtf > "${SAMPLE_ID}_primary_no_Intron_Only.bam"

    #Redefine the ${input_bam}:
    input_bam="${SAMPLE_ID}_primary_no_Intron_Only.bam"
    echo 'Ending Intron_Only_Regions read overlap filter'
fi


# For the "Intronic_Only" counts I need to process the BAM file to filter out
# splice junction reads
# Need an if statement to check ANNOTATION_FILE used:

if [ ${ANNOTATION_FILE} == "Intron_Only_Regions.gtf" ];
then
    echo 'Starting splice read filter'
    #Need a regular expression to specifically find these spliced reads:
    #Bunch of numbers then "M", bunch of numbers then "N", bunch of numbers then "M":
    # print only lines which do NOT match regex (emulates "grep -v")
    # NOT match regex:  awk '$7 !~ /^[a-f]/'
    #---------------------------------------------------------------------------------
    #Need the header (-h)
    #Need to use a regular expression match to extract header lines:
    #https://www.biostars.org/p/9247/
    #Regular expression:
    #/^@[A-Za-z][A-Za-z](\t[A-Za-z][A-Za-z0-9]:[ -~]+)+$/
    #"At" symbol then two letters, a tab, then letters, then letter and/or number, then a colon, some characters after then the end of the string
    samtools view -h ${input_bam} | awk '($0 ~ /^@[A-Za-z][A-Za-z](\t[A-Za-z][A-Za-z0-9]:[ -~]+)+$/)' > Header.txt
    #Need everything after the header information (do NOT match regex):
    samtools view -h ${input_bam} | awk '($0 !~ /^@[A-Za-z][A-Za-z](\t[A-Za-z][A-Za-z0-9]:[ -~]+)+$/)' > temp1.sam
    #Run awk command to filter out spliced reads:
    awk '($6 !~ /[0-9]+[M][0-9]+[N][0-9]+[M]/)' temp1.sam > temp2.sam
    #Add header:
    cat Header.txt temp2.sam > temp3.sam
    #Convert SAM to BAM:
    samtools view -bS temp3.sam > "${SAMPLE_ID}_primary_no_splice.bam"
    #Redefine the ${input_bam}:
    input_bam="${SAMPLE_ID}_primary_no_splice.bam"
    echo
    echo 'Ending splice read filter'
fi

#Sort the input BAM file:
#Usage:   samtools sort [options] <in.bam> <out.prefix>
#Options: -n        sort by read name
samtools sort -n ${input_bam} ${SAMPLE_ID}'_sorted'

# Since we sorted by read name we need the following htseq-count option (required
# for Paired-end sequencing data): --order=name

#Print the command
#Run the command
(set -x; samtools view "${SAMPLE_ID}_sorted.bam" | htseq-count --stranded=${STRANDEDNESS_HTSEQ} --type=${FEATURE_TYPE} --idattr=${FEATURE_ID} --order=name --mode=${MODE} - ${ANNOTATION_FILE}  > ${output_file})

echo 'Ending samtools and htseq-count'

# For the "Intronic_Only" counts I need to process the output count file so that
# upload to SEGEX will work with the RefSeq platform
# Need an if statement to check ANNOTATION_FILE used:
if [ ${ANNOTATION_FILE} == "Intron_Only_Regions.gtf" ];
then
    #Copy RefSeq_Genes_Zero_Count.txt:
    cp ${script_dir}/RefSeq_Files/RefSeq_Genes_Zero_Count.txt .
    
    #Omit header from RefSeq_Genes_Zero_Count.txt
    tail -n +2 RefSeq_Genes_Zero_Count.txt > RefSeq_Genes_Zero_Count.temp
    
    #The HTSeq output file has 5 extra lines at the end (extract then add back)
    tail -n 5 ${output_file} > HTSeq_Extra_Lines.txt
    
    #Print everything except last n lines (use negative number):
    head -n -5 ${output_file} > ${output_file}.temp1
    
    #Concatenate files:
    cat ${output_file}.temp1 RefSeq_Genes_Zero_Count.temp > ${output_file}.temp2
    
    #Sort file by gene symbol
    sort -k1,1 ${output_file}.temp2 > ${output_file}.temp3
    
    #Concatenate HTSeq_Extra_Lines.txt back to count file:
    cat ${output_file}.temp3 HTSeq_Extra_Lines.txt > ${output_file}.temp4
    
    #Rename the count file:
    mv ${output_file}.temp4 ${output_file}
    
    #Remove temp files:
    rm *.temp*
fi

# copy the output files to users storage dir
cp ${output_file} ${output_dir}

#-------------------------------------------
# Note that the output file will be summarized by gene symbol and the last 5
# lines will have extra counts
# Example output file:
# wc -l G110_M1_HTSeq.out 
# 24202 G110_M1_HTSeq.out
# I was expecting there would be 24197 unique gene symbols
# head G110_M1_HTSeq.out 
# 0610005C13Rik	2655
# 0610007P14Rik	310
# 0610009B22Rik	151
# 0610009L18Rik	7
# 0610009O20Rik	602
# 0610010B08Rik	9
# 0610010F05Rik	348
# 0610010K14Rik	194
# 0610011F06Rik	664
# 0610012G03Rik	163
# tail G110_M1_HTSeq.out 
# Zyx	793
# Zzef1	1019
# Zzz3	719
# a	0
# l7Rn6	106
# no_feature	4226540
# ambiguous	59841
# too_low_aQual	0
# not_aligned	0
# alignment_not_unique	1677774
#
# Excluding these 5 lines, I get the expected 24197 
#-------------------------------------------

echo "List files in scratch"
ls -alh

echo "Finished on : $(date)"
#Use to calculate job time:
#End_Time in seconds
end_time=$(date +"%s")
diff=$((end_time-start_time))
echo "$((diff / 3600)) hours, $(((diff / 60) % 60)) minutes and $((diff % 60)) seconds elapsed."
echo "=========================================================="
