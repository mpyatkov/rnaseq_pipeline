#!/bin/bash -l

# convert set of GTF files to one meta-assembly GTF file using TACO
# OUTPUT:
# combined GTF file with processed isoforms from multiple individual
# GTF files
# REFCOMP output

# Specify which shell to use
#$ -S /bin/bash
#$ -cwd
#$ -j y
#$ -e ./logs/
#$ -o ./logs/
#$ -pe omp 8
#$ -l mem_per_core=2G

# set strict options
set -o errexit
set -o pipefail
set -o nounset

# arguments
GROUP=$1
OUTPUT_PREFIX=$2
DESCRIPTION=$3
OUTPUT_DIR=$4
REF_FLAG=$5

MAIN_DIR="$(pwd)"

# export all variables from Pipeline_Setup.conf
eval "$(../00_Setup_Pipeline/01_Pipeline_Setup.py --export)"

# activate conda environment
set +eu
module load miniconda
conda activate --stack ${CONDA_DIR}/rlang361
conda activate --stack ${CONDA_DIR}/isoforms
conda activate --stack ${CONDA_DIR}/bedtools
set -eu

function create_description(){
    # creates description for group of samples with user,date and
    # samples included in group

    local group=$1
    local outname_path=$2

    printf "user: %s\ndate: %s\n" "${BU_USER}" "$(date)" > ${outname_path}

    samples=($("${SETUP_PIPELINE_DIR}"/01_Pipeline_Setup.py --samples_by_group ${group}))

    # loop over all samples
    for ((i=0;i< ${#samples[@]} ;i+=2));
    do
	sample_id=${samples[i]}
	condname=${samples[i+1]}
	printf "%s %s\n" "${sample_id}" "${condname}" >> ${outname_path}
    done
}

### SCRIPT START
start_time=$(date +"%s")

mkdir -p "${OUTPUT_DIR}/${DESCRIPTION}_${OUTPUT_PREFIX}"

pushd "${OUTPUT_DIR}/${DESCRIPTION}_${OUTPUT_PREFIX}"

if [ "${GROUP}" = "ALL" ]; then
    # all samples with description and color 
    samples=($("${SETUP_PIPELINE_DIR}"/01_Pipeline_Setup.py --samples))
else
    # group samples with condition name and color 
    samples=($("${SETUP_PIPELINE_DIR}"/01_Pipeline_Setup.py --samples_by_group ${GROUP}))
fi

TACO_SAMPLES_INPUT="${OUTPUT_PREFIX}.txt"
TACO_GTF_OUTPUT="${OUTPUT_PREFIX}_${REF_FLAG}"

rm -rf ${TACO_SAMPLES_INPUT}
for ((i=0;i< ${#samples[@]} ;i+=2)); do

    sample_id=${samples[i]}

    # add sample id to configuration files
    printf "../%s\n" "${sample_id}.gtf" >> "${TACO_SAMPLES_INPUT}"
done

taco_run -p ${NSLOTS} --filter-min-length 0 --filter-min-expr 0 --isoform-frac 0 -o TACO_RESULT "${TACO_SAMPLES_INPUT}"

# post-processing assembly.gtf and moving to prev. dir
pushd TACO_RESULT
cp ${MAIN_DIR}/Scripts/GTF_processing.R ./
Rscript GTF_processing.R "assembly" "${TACO_GTF_OUTPUT}"
mv "${TACO_GTF_OUTPUT}.bed" ../
mv "${TACO_GTF_OUTPUT}.gtf" ../
popd

## clean up directory
rm -rf TACO_RESULT
rm -rf "${TACO_SAMPLES_INPUT}"

## convert bed to bigBed
cp ${MAIN_DIR}/Scripts/mm9.chrom.sizes ./
sort -k1,1 -k2,2n ${TACO_GTF_OUTPUT}.bed > ${TACO_GTF_OUTPUT}.sorted.bed
bedToBigBed "${TACO_GTF_OUTPUT}.sorted.bed" mm9.chrom.sizes "${OUTPUT_PREFIX}_${REF_FLAG}.bb"
rm "${TACO_GTF_OUTPUT}.sorted.bed"
rm "${TACO_GTF_OUTPUT}.bed"
rm mm9.chrom.sizes

## create description file
create_description "${GROUP}" "${OUTPUT_PREFIX}_${REF_FLAG}_description.txt"

####
## REFCOMP calculation, compare groupped GTF and reference GTF
###

REFCOMP_TMP="${OUTPUT_PREFIX}_TMP"

taco_refcomp -p ${NSLOTS} -o "${REFCOMP_TMP}" -r "${TACO_REFCOMP_REFERENCE}"  -t "${TACO_GTF_OUTPUT}.gtf"

# rm TACO groupped GTF from if it is not required
if [ ${TACO_KEEP_GTF} -eq 0 ]; then
    rm "${TACO_GTF_OUTPUT}.gtf"
fi

pushd "${REFCOMP_TMP}"

# TSV file postprocessing  
cp ${MAIN_DIR}/Scripts/TSV_processing.R ./
Rscript TSV_processing.R "assembly.metadata" "REFCOMP_${DESCRIPTION}_${OUTPUT_PREFIX}_${REF_FLAG}"
mv "REFCOMP_${DESCRIPTION}_${OUTPUT_PREFIX}_${REF_FLAG}.tsv" ../

# copy TACO REFCOMPARE GTF if it is required
if [ ${TACO_REFCOMP_KEEP_GTF} -eq 1 ]; then
    mv "assembly.refcomp.gtf" ../"REFCOMP_${DESCRIPTION}_${OUTPUT_PREFIX}_${REF_FLAG}.gtf"     
fi

popd # go to ${OUTPUT_DIR}/${DESCRIPTION}_${OUTPUT_PREFIX}

# remove temporary dir
rm -rf ${REFCOMP_TMP}

popd # go to "${MAIN_DIR}"

# use to calculate job time:
end_time=$(date +"%s")
diff=$((end_time-start_time))
echo "$((diff / 3600)) hours, $(((diff / 60) % 60)) minutes and $((diff % 60)) seconds elapsed."
echo "=========================================================="
echo "IAMOK"
