#!/bin/bash -l

# Extract all isophorms from individual BAM file and save them as SAMPLE_ID.gtf
# OUTPUT:
# GTF file for individual sample

# Specify which shell to use
#$ -S /bin/bash
#$ -cwd
#$ -j y
#$ -e ./logs/
#$ -o ./logs/
#$ -pe omp 1

# set strict options
set -o errexit
set -o pipefail
set -o nounset

# arguments
SAMPLE_ID=$1
OUTPUT_DIR=$2
REF_FLAG=$3

# export all variables from Pipeline_Setup.conf
eval "$(../00_Setup_Pipeline/01_Pipeline_Setup.py --export)"

# activate conda environment
set +eu
module load miniconda
conda activate --stack ${CONDA_DIR}/rlang361
conda activate --stack ${CONDA_DIR}/isoforms
set -eu

start_time=$(date +"%s")

# automated strand detection
if [ ${STRANDEDNESS} -eq 3 ]; then
    export_file="${DATASET_DIR}/${SAMPLE_ID}/Read_Strandness/${SAMPLE_ID}_export.sh"
    if [[ -f "${export_file}" ]]; then
	# re-export STRANDEDNESS
	source ${export_file}
	echo "Auto: $STRANDEDNESS"
    else
	echo "Error: cannot find file: ${export_file}"
	echo "To use automatic strand detection, you must complete step 01_Read_Strandness"
	exit 1
    fi
fi

# calculate STRAND_RULE from STRANDEDNESS
if [ ${STRANDEDNESS} -eq 0 ]
then
    STRAND_OPTION=("")
elif [ ${STRANDEDNESS} -eq 2 ]
then
    STRAND_OPTION=("--fr")
elif [ ${STRANDEDNESS} -eq 1 ]
then
    STRAND_OPTION=("--rf")
fi

mkdir -p ${OUTPUT_DIR}
pushd ${OUTPUT_DIR}
if [ ${TACO_STRINGTIE_REFERENCE} != "NA" -a ${REF_FLAG} = "RefOn" ]; then
    (set -x; stringtie -G ${TACO_STRINGTIE_REFERENCE} ${STRAND_OPTION[@]} "${DATASET_DIR}/${SAMPLE_ID}/aligner/${SAMPLE_ID}_primary_unique.bam" -o "${SAMPLE_ID}.gtf")
elif [ ${REF_FLAG} = "RefOff" ]; then
    # do not use reference file for stringtie, build de-novo assembly
    (set -x; stringtie ${STRAND_OPTION[@]} "${DATASET_DIR}/${SAMPLE_ID}/aligner/${SAMPLE_ID}_primary_unique.bam" -o "${SAMPLE_ID}.gtf")
else
    echo "ERROR: inconsistent options:"
    echo "   TACO_STRINGTIE_REFERENCE=${TACO_STRINGTIE_REFERENCE}"
    echo "                   REF_FLAG=${TACO_STRINGTIE_REFERENCE}"
    exit 1
fi
popd

# use to calculate job time:
end_time=$(date +"%s")
diff=$((end_time-start_time))
echo "$((diff / 3600)) hours, $(((diff / 60) % 60)) minutes and $((diff % 60)) seconds elapsed."
echo "=========================================================="
echo "IAMOK"
