#!/bin/bash -l

set -o errexit
set -o pipefail
set -o nounset

##################################################################################
#$ -S /bin/bash
#$ -cwd
#$ -j y
#$ -e ./logs/
#$ -o ./logs/
##################################################################################

# export all variables from Pipeline_Setup.conf
eval "$(../00_Setup_Pipeline/01_Pipeline_Setup.py --export)"

#checking the command line arg
#-ne : "is not equal to"
if [ $# -ne 1 ] ; then
    echo "Need 1 arguments for the qsub command:"
    echo "qsub -N ${job_name}_${sample_id} -P ${PROJECT} -l h_rt=${TIME_LIMIT} Read_Strandness.qsub ${sample_id}"
    exit 0
fi

SAMPLE_ID=$1
SCRIPT_DIR=$(pwd)

start_time=$(date +"%s")
echo "Starting on : $(date)"
echo "Running on node : $(hostname)"
echo "Current directory : $(pwd)"
echo "Current job ID : $JOB_ID"
echo "Current job name : $JOB_NAME"
echo "Task index number : $SGE_TASK_ID"
echo "Parameter for multiple cores : $NSLOTS"
echo "=========================================================="

# for debug only
# TMPDIR=TMP
# rm -rf ${TMPDIR} && mkdir -p ${TMPDIR}

# Go to local scratch directory
cd "${TMPDIR}"

echo 'Loading required modules...'
set +eu
module load miniconda
conda activate --stack ${CONDA_DIR}/rseqc
conda activate --stack ${CONDA_DIR}/samtools
conda activate --stack ${CONDA_DIR}/hisat2
set -eu

# module load samtools
# module load python3
# module load rseqc
# module load hisat2

echo "Get R1 and R2"

# get_sample_info return (PRJ_NAME, READ1, READ2) or EXCEPTION
sample_info=($("${SETUP_PIPELINE_DIR}"/01_Pipeline_Setup.py --get_sample_info ${SAMPLE_ID}))

R1=${sample_info[1]}
R2=${sample_info[2]}

# show all fastq files
echo "first reads"
ls -l $R1
echo "second reads"
ls -l $R2

# if fastq files do not exist the following commands should raise
# an error and script will be interrupted

for f in $R1; do
    [ -e "$f" ] && echo "file $f exists" || (echo "ERROR: file $f does not exist"; exit 1)
done

for f in $R2; do
    [ -e "$f" ] && echo "file $f exists" || (echo "ERROR: file $f does not exist"; exit 1) 
done

echo "Make a subset of R1,R2"
# get only 100000 lines from each fastq file
# TODO: to figure out why we need to switch off the control under pipes here
set +o pipefail
zcat $R1 | head -n100000 > R1.fq
zcat $R2 | head -n100000 > R2.fq
set -o pipefail

# create small bam file using R1 and R2
hisat2 -x ${HISAT2INDEX_DIR}/mm9.primary_assembly -1 R1.fq -2 R2.fq | samtools view -Sb - > "${SAMPLE_ID}_primary_unique.bam"
ls -l

# return: 0/1/2 - strandedness as it described in config file
# input: file obtained from infer_experiment.py
get_strandedness() {
    # output of infer_experiment
    local fname=$1
    second=$(cat ${fname} | grep expl | cut -d ":" -f2 | tr -d ' ' | head -n1)
    first=$(cat ${fname} | grep expl | cut -d ":" -f2 | tr -d ' ' | tail -n1)

    if (( $(echo "${first} > 0.7" | bc -l) )); then
	# fr-firststrand
        echo "1"
    elif (( $(echo "${second} > 0.7" | bc -l) )); then
	# fr-secondstrand
        echo "2"
    else
	# unstranded
        echo "0"
    fi
}

#Initialize INPUT_BAM:
input_bam=${SAMPLE_ID}'_primary_unique.bam'

#Copy Read_Strandness required files:
cp "${SCRIPT_DIR}/Input_Regions/mm9.refseq.bed.gz" .

storage_dir="${DATASET_DIR}/${SAMPLE_ID}/"

#Create Read_Strandness output folder to store files:
output_dir='Read_Strandness'
mkdir -p ${output_dir}

#Create output file to store the result:
output_file="${output_dir}/${SAMPLE_ID}_Read_Strandness.txt"

# file with export command which we will use to reexport default 
# value of strandedness
export_file="${output_dir}/${SAMPLE_ID}_export.sh"

echo 'Unzip files:'
time gzip -d *.gz

# all documentation about infer_experiment.py here:
# http://rseqc.sourceforge.net/#infer-experiment-py

# print command
(set -x; infer_experiment.py --input-file=${input_bam} --refgene=mm9.refseq.bed > $output_file)
cat ${output_file}

# get strandedness 0/1/2
strandedness=$(get_strandedness $output_file)

echo "export STRANDEDNESS=${strandedness}" > ${export_file}

#Need to remove first 2 blank lines:
awk 'NR > 2 { print $0 }' "$output_file" > temp1.txt
mv temp1.txt "$output_file"

echo 'Output file from infer_experiment.py:'
head "$output_file"

echo 'Copy output to storage dir'
cp -r "$output_dir" "$storage_dir"

echo "Finished on : $(date)"

#end_time in seconds
end_time=$(date +"%s")
diff=$((end_time-start_time))

echo "$((diff / 3600)) hours, $(((diff / 60) % 60)) minutes and $((diff % 60)) seconds elapsed."
echo "=========================================================="
echo "IAMOK"
